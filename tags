!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CSU32	include/uvc_cam/uvc_cam.h	53;"	d
Cam	include/uvc_cam/uvc_cam.h	/^class Cam$/;"	c	namespace:uvc_cam
Cam	src/uvc_cam.cpp	/^Cam::Cam(const char *_device, mode_t _mode, int _width, int _height, int _fps)$/;"	f	class:Cam
Camera	include/uvc_camera/camera.h	/^class Camera {$/;"	c	namespace:uvc_camera
Camera	src/camera.cpp	/^Camera::Camera(ros::NodeHandle _comm_nh, ros::NodeHandle _param_nh) :$/;"	f	class:uvc_camera::Camera
CameraNodelet	src/nodelets.cpp	/^    CameraNodelet() {}$/;"	f	class:uvc_camera::CameraNodelet
CameraNodelet	src/nodelets.cpp	/^class CameraNodelet : public nodelet::Nodelet {$/;"	c	namespace:uvc_camera	file:
MODE_MJPG	include/uvc_cam/uvc_cam.h	/^  enum mode_t { MODE_RGB, MODE_MJPG, MODE_YUYV } mode;$/;"	e	enum:uvc_cam::Cam::mode_t
MODE_RGB	include/uvc_cam/uvc_cam.h	/^  enum mode_t { MODE_RGB, MODE_MJPG, MODE_YUYV } mode;$/;"	e	enum:uvc_cam::Cam::mode_t
MODE_YUYV	include/uvc_cam/uvc_cam.h	/^  enum mode_t { MODE_RGB, MODE_MJPG, MODE_YUYV } mode;$/;"	e	enum:uvc_cam::Cam::mode_t
NUM_BUFFER	include/uvc_cam/uvc_cam.h	/^  static const unsigned NUM_BUFFER = 2;$/;"	m	class:uvc_cam::Cam
StereoCamera	include/uvc_camera/stereocamera.h	/^class StereoCamera {$/;"	c	namespace:uvc_camera
StereoCamera	src/stereo.cpp	/^StereoCamera::StereoCamera(ros::NodeHandle comm_nh, ros::NodeHandle param_nh) :$/;"	f	class:uvc_camera::StereoCamera
StereoNodelet	src/nodelets.cpp	/^    StereoNodelet() {}$/;"	f	class:uvc_camera::StereoNodelet
StereoNodelet	src/nodelets.cpp	/^class StereoNodelet : public nodelet::Nodelet {$/;"	c	namespace:uvc_camera	file:
UVC_CAM_H	include/uvc_cam/uvc_cam.h	23;"	d
UVC_CTRL_DATA_TYPE_BITMASK	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_BITMASK = 5;$/;"	m	class:uvc_cam::Cam
UVC_CTRL_DATA_TYPE_BOOLEAN	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_BOOLEAN = 3;$/;"	m	class:uvc_cam::Cam
UVC_CTRL_DATA_TYPE_ENUM	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_ENUM = 4;$/;"	m	class:uvc_cam::Cam
UVC_CTRL_DATA_TYPE_RAW	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_RAW = 0;$/;"	m	class:uvc_cam::Cam
UVC_CTRL_DATA_TYPE_SIGNED	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_SIGNED	= 1;$/;"	m	class:uvc_cam::Cam
UVC_CTRL_DATA_TYPE_UNSIGNED	include/uvc_cam/uvc_cam.h	/^  CSU32 UVC_CTRL_DATA_TYPE_UNSIGNED	= 2;$/;"	m	class:uvc_cam::Cam
V4L2_CID_BACKLIGHT_COMPENSATION_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_BACKLIGHT_COMPENSATION_NEW = V4L2_CID_BASE_NEW + 28;$/;"	m	class:uvc_cam::Cam
V4L2_CID_BACKLIGHT_COMPENSATION_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_BACKLIGHT_COMPENSATION_OLD = V4L2_CID_PRIVATE_BASE_OLD + 0;$/;"	m	class:uvc_cam::Cam
V4L2_CID_BASE_EXTCTR	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_BASE_EXTCTR = 0x0A046D01;$/;"	m	class:uvc_cam::Cam
V4L2_CID_BASE_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_BASE_LOGITECH = V4L2_CID_BASE_EXTCTR;$/;"	m	class:uvc_cam::Cam
V4L2_CID_BASE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_BASE_NEW = V4L2_CTRL_CLASS_USER_NEW | 0x900;$/;"	m	class:uvc_cam::Cam
V4L2_CID_CAMERA_CLASS_BASE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_CAMERA_CLASS_BASE_NEW = V4L2_CTRL_CLASS_CAMERA_NEW | 0x900;$/;"	m	class:uvc_cam::Cam
V4L2_CID_CAMERA_CLASS_LAST	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_CAMERA_CLASS_LAST = V4L2_CID_CAMERA_CLASS_BASE_NEW + 13;$/;"	m	class:uvc_cam::Cam
V4L2_CID_DISABLE_PROCESSING_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_DISABLE_PROCESSING_LOGITECH = V4L2_CID_BASE_LOGITECH + 0x70;$/;"	m	class:uvc_cam::Cam
V4L2_CID_EXPOSURE_ABSOLUTE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_EXPOSURE_ABSOLUTE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 2;$/;"	m	class:uvc_cam::Cam
V4L2_CID_EXPOSURE_ABSOLUTE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_EXPOSURE_ABSOLUTE_OLD = V4L2_CID_PRIVATE_BASE_OLD + 11;$/;"	m	class:uvc_cam::Cam
V4L2_CID_EXPOSURE_AUTO_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_EXPOSURE_AUTO_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 1;$/;"	m	class:uvc_cam::Cam
V4L2_CID_EXPOSURE_AUTO_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_EXPOSURE_AUTO_OLD = V4L2_CID_PRIVATE_BASE_OLD + 10;$/;"	m	class:uvc_cam::Cam
V4L2_CID_EXPOSURE_AUTO_PRIORITY_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_EXPOSURE_AUTO_PRIORITY_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW+3;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_ABSOLUTE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_ABSOLUTE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 10;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_ABSOLUTE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_ABSOLUTE_OLD = V4L2_CID_PRIVATE_BASE_OLD + 5;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_AUTO_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_AUTO_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 12;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_AUTO_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_AUTO_OLD = V4L2_CID_PRIVATE_BASE_OLD + 4;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_LOGITECH = V4L2_CID_BASE_LOGITECH + 3;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_RELATIVE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_RELATIVE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 11;$/;"	m	class:uvc_cam::Cam
V4L2_CID_FOCUS_RELATIVE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_FOCUS_RELATIVE_OLD = V4L2_CID_PRIVATE_BASE_OLD + 6;$/;"	m	class:uvc_cam::Cam
V4L2_CID_HUE_AUTO_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_HUE_AUTO_NEW = V4L2_CID_BASE_NEW + 25;$/;"	m	class:uvc_cam::Cam
V4L2_CID_HUE_AUTO_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_HUE_AUTO_OLD = V4L2_CID_PRIVATE_BASE_OLD + 3;$/;"	m	class:uvc_cam::Cam
V4L2_CID_LAST_EXTCTR	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_LAST_EXTCTR = V4L2_CID_RAW_BITS_PER_PIXEL_LOGITECH;$/;"	m	class:uvc_cam::Cam
V4L2_CID_LAST_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_LAST_NEW = V4L2_CID_BASE_NEW + 29;$/;"	m	class:uvc_cam::Cam
V4L2_CID_LED1_FREQUENCY_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_LED1_FREQUENCY_LOGITECH = V4L2_CID_BASE_LOGITECH + 5;$/;"	m	class:uvc_cam::Cam
V4L2_CID_LED1_MODE_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_LED1_MODE_LOGITECH = V4L2_CID_BASE_LOGITECH + 4;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PANTILT_RESET_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PANTILT_RESET_LOGITECH = V4L2_CID_BASE_LOGITECH + 2;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PANTILT_RESET_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PANTILT_RESET_OLD = V4L2_CID_PRIVATE_BASE_OLD + 9;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PAN_ABSOLUTE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PAN_ABSOLUTE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 8;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PAN_RELATIVE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PAN_RELATIVE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 4;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PAN_RELATIVE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PAN_RELATIVE_OLD = V4L2_CID_PRIVATE_BASE_OLD + 7;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PAN_RESET_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PAN_RESET_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 6;$/;"	m	class:uvc_cam::Cam
V4L2_CID_POWER_LINE_FREQUENCY_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_POWER_LINE_FREQUENCY_NEW = V4L2_CID_BASE_NEW + 24;$/;"	m	class:uvc_cam::Cam
V4L2_CID_POWER_LINE_FREQUENCY_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_POWER_LINE_FREQUENCY_OLD = V4L2_CID_PRIVATE_BASE_OLD + 1;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PRIVATE_BASE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PRIVATE_BASE_OLD = 0x08000000;$/;"	m	class:uvc_cam::Cam
V4L2_CID_PRIVATE_LAST	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_PRIVATE_LAST = V4L2_CID_WHITE_BALANCE_TEMP_OLD + 1;$/;"	m	class:uvc_cam::Cam
V4L2_CID_RAW_BITS_PER_PIXEL_LOGITECH	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_RAW_BITS_PER_PIXEL_LOGITECH = V4L2_CID_BASE_LOGITECH + 0x71;$/;"	m	class:uvc_cam::Cam
V4L2_CID_SHARPNESS_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_SHARPNESS_NEW = V4L2_CID_BASE_NEW + 27;$/;"	m	class:uvc_cam::Cam
V4L2_CID_SHARPNESS_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_SHARPNESS_OLD = V4L2_CID_PRIVATE_BASE_OLD + 2;$/;"	m	class:uvc_cam::Cam
V4L2_CID_TILT_ABSOLUTE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_TILT_ABSOLUTE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 9;$/;"	m	class:uvc_cam::Cam
V4L2_CID_TILT_RELATIVE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_TILT_RELATIVE_NEW = V4L2_CID_CAMERA_CLASS_BASE_NEW + 5;$/;"	m	class:uvc_cam::Cam
V4L2_CID_TILT_RELATIVE_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_TILT_RELATIVE_OLD = V4L2_CID_PRIVATE_BASE_OLD + 8;$/;"	m	class:uvc_cam::Cam
V4L2_CID_TILT_RESET_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_TILT_RESET_NEW	= V4L2_CID_CAMERA_CLASS_BASE_NEW + 7;$/;"	m	class:uvc_cam::Cam
V4L2_CID_WHITE_BALANCE_TEMPERATURE_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_WHITE_BALANCE_TEMPERATURE_NEW = V4L2_CID_BASE_NEW + 26;$/;"	m	class:uvc_cam::Cam
V4L2_CID_WHITE_BALANCE_TEMP_AUTO_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_WHITE_BALANCE_TEMP_AUTO_OLD	= V4L2_CID_PRIVATE_BASE_OLD+12;$/;"	m	class:uvc_cam::Cam
V4L2_CID_WHITE_BALANCE_TEMP_OLD	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CID_WHITE_BALANCE_TEMP_OLD = V4L2_CID_PRIVATE_BASE_OLD + 13;$/;"	m	class:uvc_cam::Cam
V4L2_CTRL_CLASS_CAMERA_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CTRL_CLASS_CAMERA_NEW = 0x009A0000;	\/* Camera class controls *\/$/;"	m	class:uvc_cam::Cam
V4L2_CTRL_CLASS_USER_NEW	include/uvc_cam/uvc_cam.h	/^  CSU32 V4L2_CTRL_CLASS_USER_NEW = 0x00980000;$/;"	m	class:uvc_cam::Cam
V4L2_UVC_EXPOSURE_APERTURE_PRIORITY	include/uvc_cam/uvc_cam.h	/^	V4L2_UVC_EXPOSURE_APERTURE_PRIORITY = 8$/;"	e	enum:uvc_cam::v4l2_uvc_exposure_auto_type
V4L2_UVC_EXPOSURE_AUTO	include/uvc_cam/uvc_cam.h	/^	V4L2_UVC_EXPOSURE_AUTO = 2,$/;"	e	enum:uvc_cam::v4l2_uvc_exposure_auto_type
V4L2_UVC_EXPOSURE_MANUAL	include/uvc_cam/uvc_cam.h	/^	V4L2_UVC_EXPOSURE_MANUAL = 1,$/;"	e	enum:uvc_cam::v4l2_uvc_exposure_auto_type
V4L2_UVC_EXPOSURE_SHUTTER_PRIORITY	include/uvc_cam/uvc_cam.h	/^	V4L2_UVC_EXPOSURE_SHUTTER_PRIORITY = 4,$/;"	e	enum:uvc_cam::v4l2_uvc_exposure_auto_type
buf	include/uvc_cam/uvc_cam.h	/^  v4l2_buffer buf;$/;"	m	class:uvc_cam::Cam
buf_length	include/uvc_cam/uvc_cam.h	/^  unsigned buf_length;$/;"	m	class:uvc_cam::Cam
cam	include/uvc_camera/camera.h	/^    uvc_cam::Cam *cam;$/;"	m	class:uvc_camera::Camera
cam_left	include/uvc_camera/stereocamera.h	/^    uvc_cam::Cam *cam_left, *cam_right;$/;"	m	class:uvc_camera::StereoCamera
cam_right	include/uvc_camera/stereocamera.h	/^    uvc_cam::Cam *cam_left, *cam_right;$/;"	m	class:uvc_camera::StereoCamera
camera	src/nodelets.cpp	/^    Camera *camera;$/;"	m	class:uvc_camera::CameraNodelet	file:
cap	include/uvc_cam/uvc_cam.h	/^  v4l2_capability cap;$/;"	m	class:uvc_cam::Cam
control_mod	src/stereo.cpp	/^  control_mod(uint32_t id, int32_t val, const std::string& name) {$/;"	f	struct:control_mod
control_mod	src/stereo.cpp	/^struct control_mod {$/;"	s	file:
control_mod_t	src/stereo.cpp	/^typedef struct control_mod control_mod_t;$/;"	t	typeref:struct:control_mod	file:
device	include/uvc_cam/uvc_cam.h	/^  std::string device;$/;"	m	class:uvc_cam::Cam
device	include/uvc_camera/camera.h	/^    std::string device, frame, format;$/;"	m	class:uvc_camera::Camera
enumerate	src/uvc_cam.cpp	/^void Cam::enumerate()$/;"	f	class:Cam
exp_vals	include/uvc_cam/uvc_cam.h	/^static const int exp_vals[]=$/;"	m	namespace:uvc_cam
fd	include/uvc_cam/uvc_cam.h	/^  int fd, motion_threshold_luminance, motion_threshold_count;$/;"	m	class:uvc_cam::Cam
feedImages	src/camera.cpp	/^    void Camera::feedImages() {$/;"	f	class:uvc_camera::Camera
feedImages	src/stereo.cpp	/^void StereoCamera::feedImages() {$/;"	f	class:uvc_camera::StereoCamera
fmt	include/uvc_cam/uvc_cam.h	/^  v4l2_format fmt;$/;"	m	class:uvc_cam::Cam
format	include/uvc_camera/camera.h	/^    std::string device, frame, format;$/;"	m	class:uvc_camera::Camera
fps	include/uvc_cam/uvc_cam.h	/^  unsigned width, height, fps;$/;"	m	class:uvc_cam::Cam
fps	include/uvc_camera/camera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::Camera
fps	include/uvc_camera/stereocamera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::StereoCamera
frame	include/uvc_camera/camera.h	/^    std::string device, frame, format;$/;"	m	class:uvc_camera::Camera
frame	include/uvc_camera/stereocamera.h	/^    std::string left_device, right_device, frame;$/;"	m	class:uvc_camera::StereoCamera
frames_to_skip	include/uvc_camera/camera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::Camera
frames_to_skip	include/uvc_camera/stereocamera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::StereoCamera
grab	src/uvc_cam.cpp	/^int Cam::grab(unsigned char **frame, uint32_t &bytes_used)$/;"	f	class:Cam
height	include/uvc_cam/uvc_cam.h	/^  unsigned width, height, fps;$/;"	m	class:uvc_cam::Cam
height	include/uvc_camera/camera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::Camera
height	include/uvc_camera/stereocamera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::StereoCamera
id	src/stereo.cpp	/^  uint32_t id;$/;"	m	struct:control_mod	file:
image_thread	include/uvc_camera/camera.h	/^    boost::thread image_thread;$/;"	m	class:uvc_camera::Camera
image_thread	include/uvc_camera/stereocamera.h	/^    boost::thread image_thread;$/;"	m	class:uvc_camera::StereoCamera
info_mgr	include/uvc_camera/camera.h	/^    camera_info_manager::CameraInfoManager info_mgr;$/;"	m	class:uvc_camera::Camera
info_pub	include/uvc_camera/camera.h	/^    ros::Publisher info_pub;$/;"	m	class:uvc_camera::Camera
it	include/uvc_camera/camera.h	/^    image_transport::ImageTransport it;$/;"	m	class:uvc_camera::Camera
it	include/uvc_camera/stereocamera.h	/^    image_transport::ImageTransport it;$/;"	m	class:uvc_camera::StereoCamera
last_yuv_frame	include/uvc_cam/uvc_cam.h	/^  unsigned char *rgb_frame, *last_yuv_frame;$/;"	m	class:uvc_cam::Cam
left_device	include/uvc_camera/stereocamera.h	/^    std::string left_device, right_device, frame;$/;"	m	class:uvc_camera::StereoCamera
left_info_mgr	include/uvc_camera/stereocamera.h	/^    camera_info_manager::CameraInfoManager left_info_mgr, right_info_mgr;$/;"	m	class:uvc_camera::StereoCamera
left_info_pub	include/uvc_camera/stereocamera.h	/^    ros::Publisher left_info_pub, right_info_pub;$/;"	m	class:uvc_camera::StereoCamera
left_pub	include/uvc_camera/stereocamera.h	/^    image_transport::Publisher left_pub, right_pub;$/;"	m	class:uvc_camera::StereoCamera
main	src/camera_node.cpp	/^int main (int argc, char **argv) {$/;"	f
main	src/stereo_node.cpp	/^int main (int argc, char **argv) {$/;"	f
mem	include/uvc_cam/uvc_cam.h	/^  void *mem[NUM_BUFFER];$/;"	m	class:uvc_cam::Cam
mode	include/uvc_cam/uvc_cam.h	/^  enum mode_t { MODE_RGB, MODE_MJPG, MODE_YUYV } mode;$/;"	m	class:uvc_cam::Cam	typeref:enum:uvc_cam::Cam::mode_t
mode_t	include/uvc_cam/uvc_cam.h	/^  enum mode_t { MODE_RGB, MODE_MJPG, MODE_YUYV } mode;$/;"	g	class:uvc_cam::Cam
motion_threshold_count	include/uvc_cam/uvc_cam.h	/^  int fd, motion_threshold_luminance, motion_threshold_count;$/;"	m	class:uvc_cam::Cam
motion_threshold_luminance	include/uvc_cam/uvc_cam.h	/^  int fd, motion_threshold_luminance, motion_threshold_count;$/;"	m	class:uvc_cam::Cam
name	src/stereo.cpp	/^  std::string name;$/;"	m	struct:control_mod	file:
node	include/uvc_camera/camera.h	/^    ros::NodeHandle node, pnode;$/;"	m	class:uvc_camera::Camera
node	include/uvc_camera/stereocamera.h	/^    ros::NodeHandle node, pnode;$/;"	m	class:uvc_camera::StereoCamera
ok	include/uvc_camera/camera.h	/^    bool ok;$/;"	m	class:uvc_camera::Camera
ok	include/uvc_camera/stereocamera.h	/^    bool ok;$/;"	m	class:uvc_camera::StereoCamera
onInit	src/nodelets.cpp	/^    void onInit() {$/;"	f	class:uvc_camera::CameraNodelet
onInit	src/nodelets.cpp	/^    void onInit() {$/;"	f	class:uvc_camera::StereoNodelet
pnode	include/uvc_camera/camera.h	/^    ros::NodeHandle node, pnode;$/;"	m	class:uvc_camera::Camera
pnode	include/uvc_camera/stereocamera.h	/^    ros::NodeHandle node, pnode;$/;"	m	class:uvc_camera::StereoCamera
pub	include/uvc_camera/camera.h	/^    image_transport::Publisher pub;$/;"	m	class:uvc_camera::Camera
pubjpeg	include/uvc_camera/camera.h	/^    ros::Publisher pubjpeg;$/;"	m	class:uvc_camera::Camera
rb	include/uvc_cam/uvc_cam.h	/^  v4l2_requestbuffers rb;$/;"	m	class:uvc_cam::Cam
release	src/uvc_cam.cpp	/^void Cam::release(unsigned buf_idx)$/;"	f	class:Cam
rgb_frame	include/uvc_cam/uvc_cam.h	/^  unsigned char *rgb_frame, *last_yuv_frame;$/;"	m	class:uvc_cam::Cam
right_device	include/uvc_camera/stereocamera.h	/^    std::string left_device, right_device, frame;$/;"	m	class:uvc_camera::StereoCamera
right_info_mgr	include/uvc_camera/stereocamera.h	/^    camera_info_manager::CameraInfoManager left_info_mgr, right_info_mgr;$/;"	m	class:uvc_camera::StereoCamera
right_info_pub	include/uvc_camera/stereocamera.h	/^    ros::Publisher left_info_pub, right_info_pub;$/;"	m	class:uvc_camera::StereoCamera
right_pub	include/uvc_camera/stereocamera.h	/^    image_transport::Publisher left_pub, right_pub;$/;"	m	class:uvc_camera::StereoCamera
rotate	include/uvc_camera/camera.h	/^    bool rotate;$/;"	m	class:uvc_camera::Camera
rotate	src/stereo.cpp	/^static inline void rotate(unsigned char *dst_chr, unsigned char *src_chr, int pixels) {$/;"	f	file:
rotate_left	include/uvc_camera/stereocamera.h	/^    bool rotate_left, rotate_right;$/;"	m	class:uvc_camera::StereoCamera
rotate_right	include/uvc_camera/stereocamera.h	/^    bool rotate_left, rotate_right;$/;"	m	class:uvc_camera::StereoCamera
sat	src/uvc_cam.cpp	/^inline unsigned char sat(float f)$/;"	f
sendInfo	src/camera.cpp	/^    void Camera::sendInfo(ImagePtr &image, ros::Time time) {$/;"	f	class:uvc_camera::Camera
sendInfo	src/stereo.cpp	/^void StereoCamera::sendInfo(ros::Time time) {$/;"	f	class:uvc_camera::StereoCamera
sendInfoJpeg	src/camera.cpp	/^    void Camera::sendInfoJpeg(ros::Time time) {$/;"	f	class:uvc_camera::Camera
set_control	src/uvc_cam.cpp	/^void Cam::set_control(uint32_t id, int val)$/;"	f	class:Cam
set_motion_thresholds	src/uvc_cam.cpp	/^void Cam::set_motion_thresholds(int lum, int count)$/;"	f	class:Cam
set_v4l2_control	src/uvc_cam.cpp	/^Cam::set_v4l2_control(int id, int value, const std::string& name)$/;"	f	class:Cam
skip_frames	include/uvc_camera/camera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::Camera
skip_frames	include/uvc_camera/stereocamera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::StereoCamera
stereo	src/nodelets.cpp	/^    StereoCamera *stereo;$/;"	m	class:uvc_camera::StereoNodelet	file:
streamparm	include/uvc_cam/uvc_cam.h	/^  v4l2_streamparm streamparm;$/;"	m	class:uvc_cam::Cam
timecode	include/uvc_cam/uvc_cam.h	/^  v4l2_timecode timecode;$/;"	m	class:uvc_cam::Cam
uvc_cam	include/uvc_cam/uvc_cam.h	/^namespace uvc_cam$/;"	n
uvc_camera	include/uvc_camera/camera.h	/^namespace uvc_camera {$/;"	n
uvc_camera	include/uvc_camera/stereocamera.h	/^namespace uvc_camera {$/;"	n
uvc_camera	src/camera.cpp	/^namespace uvc_camera {$/;"	n	file:
uvc_camera	src/nodelets.cpp	/^namespace uvc_camera {$/;"	n	file:
uvc_camera	src/stereo.cpp	/^namespace uvc_camera {$/;"	n	file:
v4l2_query	src/uvc_cam.cpp	/^Cam::v4l2_query(int id, const std::string& name)$/;"	f	class:Cam
v4l2_uvc_exposure_auto_type	include/uvc_cam/uvc_cam.h	/^enum v4l2_uvc_exposure_auto_type$/;"	g	namespace:uvc_cam
val	src/stereo.cpp	/^  int32_t val;$/;"	m	struct:control_mod	file:
width	include/uvc_cam/uvc_cam.h	/^  unsigned width, height, fps;$/;"	m	class:uvc_cam::Cam
width	include/uvc_camera/camera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::Camera
width	include/uvc_camera/stereocamera.h	/^    int width, height, fps, skip_frames, frames_to_skip;$/;"	m	class:uvc_camera::StereoCamera
~Cam	src/uvc_cam.cpp	/^Cam::~Cam()$/;"	f	class:Cam
~Camera	src/camera.cpp	/^    Camera::~Camera() {$/;"	f	class:uvc_camera::Camera
~CameraNodelet	src/nodelets.cpp	/^    ~CameraNodelet() {$/;"	f	class:uvc_camera::CameraNodelet
~StereoCamera	src/stereo.cpp	/^StereoCamera::~StereoCamera() {$/;"	f	class:uvc_camera::StereoCamera
~StereoNodelet	src/nodelets.cpp	/^    ~StereoNodelet() {$/;"	f	class:uvc_camera::StereoNodelet
